Exercise 1.5.  Ben Bitdiddle has invented a test to determine whether the interpreter he is faced with is using applicative-order evaluation or normal-order evaluation. He defines the following two procedures:

(define (p) (p))

(define (test x y)
  (if (= x 0)
      0
      y))

Then he evaluates the expression

(test 0 (p))

What behavior will Ben observe with an interpreter that uses applicative-order evaluation? What behavior will he observe with an interpreter that uses normal-order evaluation? Explain your answer. (Assume that the evaluation rule for the special form if is the same whether the interpreter is using normal or applicative order: The predicate expression is evaluated first, and the result determines whether to evaluate the consequent or the alternative expression.) 


Answer:
   First definitions:
   applicative-order    -> "evaluate the arguements and apply"
   normal-order         -> "fully expand and then reduce"


With applicative-order evaluation Ben will see the arguments get evalulated first.  This will cause (p) to be called over and over again.

With normal-order evaluation the arguements to (test) will not be evaluated until needed.  This will caused the number '0' to be returned from the (test 0 (p)) call as the if statement would evaluate to true, causing (p) to never actually be executed.
